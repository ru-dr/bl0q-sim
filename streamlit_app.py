import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from datetime import datetime
import warnings

warnings.filterwarnings("ignore")

# Config object to hold all constants and parameters
CONFIG = {
    "STRIPE_PERCENT": 0.029,
    "STRIPE_FIXED": 0.30,
    "STRIPE_PLATFORM_PERCENT": 0.0025,
    "INTERNATIONAL_FEE_PERCENT": 0.01,
    "NUM_PROJECTS": 5000,
    "STRIPE_TRANSFER_PERCENT": 0.03,
    "STRIPE_TRANSFER_FIXED": 0.50,
    "PROJECT_TYPES": ["code", "docs", "image", "video"],
    "INFRA_COSTS": {
        "code": 0.20,
        "docs": 0.08,
        "image": 0.10,
        "video": {"free_gb": 2, "cost_per_gb": 0.10},
    },
    "CAC_PER_CUSTOMER": 70,
    "TEAM_SALARIES": {
        "developers": {"count": 2, "monthly_salary": 8000},
        "marketer": {"count": 1, "monthly_salary": 6000},
        "support": {"count": 1, "monthly_salary": 4000},
    },
    "PAYROLL_MULTIPLIER": 1.15,
    "DEFAULT_PLATFORM_FEE_PERCENT": 10.0,
    "FEE_THRESHOLD": 1000,
    "FLAT_FEE": 120,
    "TRANSFER_FEE_PERCENT": 0.015,
    "TRANSFER_FEE_MAX": 15,
}

st.set_page_config(page_title="bl0q Platform Simulator", layout="wide", page_icon="üí°")

# Only keep the main header markup
st.markdown(
    '<div class="main-header"><h1>üöÄ bl0q Platform Financial Simulator</h1><p>Comprehensive financial modeling with AI-powered forecasting, team cost management, and advanced analytics</p></div>',
    unsafe_allow_html=True,
)

# Add info box to clarify CAC handling and LTV calculation
st.info(
    """
    **Note:** Per-project Net Profit now *excludes* Customer Acquisition Cost (CAC). CAC is calculated at the aggregate (customer) level and reflected in the P&L, EBITDA, and LTV metrics. LTV represents the average revenue generated by a customer over their lifetime, based on the average number of projects per customer.
    """,
    icon="‚ÑπÔ∏è",
)

# Sidebar Controls
st.sidebar.header("üéõÔ∏è Simulation Controls")

with st.sidebar.expander("üìä Project Parameters", expanded=True):
    num_projects = st.slider(
        "Number of Projects", 100, 20000, CONFIG["NUM_PROJECTS"], 500
    )
    project_min = st.number_input("Min Project Value ($)", 10, 2000, 1000)
    project_max = st.number_input("Max Project Value ($)", 500, 20000, 5000)
    monthly_customers = st.number_input("Monthly New Customers", 10, 1000, 100)
    churn_rate = st.slider("Monthly Churn Rate (%)", 0.0, 50.0, 5.0, 0.5)
    avg_projects_per_customer = st.number_input(
        "Avg Projects per Customer", 1.0, 20.0, 2.5, 0.1
    )

with st.sidebar.expander("üí∞ Revenue Model", expanded=True):
    fee_threshold = st.number_input(
        "Fee Threshold ($)", 100, 5000, CONFIG["FEE_THRESHOLD"], 100
    )
    flat_fee = st.number_input(
        "Flat Fee (< threshold) ($)", 10, 500, CONFIG["FLAT_FEE"], 1
    )
    commission_rate = st.slider(
        "Commission Rate (‚â• threshold) %",
        3.0,
        15.0,
        CONFIG["DEFAULT_PLATFORM_FEE_PERCENT"],
        0.1,
    )

with st.sidebar.expander("üèóÔ∏è Infrastructure Costs"):
    code_infra = st.number_input(
        "Code Infra Cost ($)", 0.0, 2.0, CONFIG["INFRA_COSTS"]["code"], 0.01
    )
    docs_infra = st.number_input(
        "Docs Infra Cost ($)", 0.0, 2.0, CONFIG["INFRA_COSTS"]["docs"], 0.01
    )
    image_infra = st.number_input(
        "Image Infra Cost ($)", 0.0, 2.0, CONFIG["INFRA_COSTS"]["image"], 0.01
    )
    video_free_gb = st.number_input(
        "Video Free GB",
        0.0,
        10.0,
        float(CONFIG["INFRA_COSTS"]["video"]["free_gb"]),
        0.1,
    )
    video_cost_per_gb = st.number_input(
        "Video Cost per GB ($)",
        0.0,
        1.0,
        float(CONFIG["INFRA_COSTS"]["video"]["cost_per_gb"]),
        0.01,
    )

with st.sidebar.expander("üë• Team & Operating Costs"):
    enable_salaries = st.toggle("Enable Team Salary Costs", value=False)

    if enable_salaries:
        dev_count = st.number_input(
            "Developers", 1, 10, CONFIG["TEAM_SALARIES"]["developers"]["count"]
        )
        dev_salary = st.number_input(
            "Developer Monthly Salary ($)",
            5000,
            15000,
            CONFIG["TEAM_SALARIES"]["developers"]["monthly_salary"],
        )
        marketer_count = st.number_input(
            "Marketers", 0, 5, CONFIG["TEAM_SALARIES"]["marketer"]["count"]
        )
        marketer_salary = st.number_input(
            "Marketer Monthly Salary ($)",
            4000,
            12000,
            CONFIG["TEAM_SALARIES"]["marketer"]["monthly_salary"],
        )
        support_count = st.number_input(
            "Support Staff", 0, 5, CONFIG["TEAM_SALARIES"]["support"]["count"]
        )
        support_salary = st.number_input(
            "Support Monthly Salary ($)",
            3000,
            8000,
            CONFIG["TEAM_SALARIES"]["support"]["monthly_salary"],
        )
        payroll_multiplier = st.slider(
            "Payroll Multiplier (Benefits)",
            1.0,
            1.5,
            CONFIG["PAYROLL_MULTIPLIER"],
            0.05,
        )

        monthly_team_cost = (
            dev_count * dev_salary
            + marketer_count * marketer_salary
            + support_count * support_salary
        ) * payroll_multiplier
    else:
        monthly_team_cost = 0

with st.sidebar.expander("üìà Customer Acquisition"):
    cac_per_customer = st.number_input(
        "CAC per Customer ($)", 0, 100, CONFIG["CAC_PER_CUSTOMER"]
    )

CONFIG["INFRA_COSTS"]["code"] = code_infra
CONFIG["INFRA_COSTS"]["docs"] = docs_infra
CONFIG["INFRA_COSTS"]["image"] = image_infra
CONFIG["INFRA_COSTS"]["video"]["free_gb"] = video_free_gb
CONFIG["INFRA_COSTS"]["video"]["cost_per_gb"] = video_cost_per_gb


def simulate_projects(
    n_projects,
    min_val,
    max_val,
    fee_threshold,
    flat_fee,
    commission_rate,
    config,
):
    project_data = []
    for _ in range(n_projects):
        project_value = round(np.random.uniform(min_val, max_val), 2)

        if project_value < fee_threshold:
            platform_fee = flat_fee
        else:
            platform_fee = round(project_value * (commission_rate / 100), 2)

        stripe_fee = round(
            project_value * config["STRIPE_PERCENT"] + config["STRIPE_FIXED"], 2
        )
        stripe_platform_fee = round(platform_fee * config["STRIPE_PLATFORM_PERCENT"], 2)
        transfer_fee = round(
            min(
                project_value * config["TRANSFER_FEE_PERCENT"],
                config["TRANSFER_FEE_MAX"],
            ),
            2,
        )
        international_fee = round(
            project_value * config["INTERNATIONAL_FEE_PERCENT"], 2
        )

        project_type = np.random.choice(
            config["PROJECT_TYPES"], p=[0.3, 0.2, 0.25, 0.25]
        )

        if project_type == "video":
            storage_gb = round(np.random.uniform(1, 15), 2)
            if storage_gb <= config["INFRA_COSTS"]["video"]["free_gb"]:
                infra_cost = 0
            else:
                additional_gb = storage_gb - config["INFRA_COSTS"]["video"]["free_gb"]
                infra_cost = round(
                    additional_gb * config["INFRA_COSTS"]["video"]["cost_per_gb"], 2
                )
        else:
            storage_gb = 0
            infra_cost = config["INFRA_COSTS"][project_type]

        net_profit = (
            platform_fee
            - stripe_fee
            - stripe_platform_fee
            - international_fee
            - infra_cost
        )
        freelancer_payout = project_value

        project_data.append(
            {
                "Project Value": project_value,
                "Project Type": project_type,
                "Storage GB": storage_gb,
                "Platform Fee": platform_fee,
                "Stripe Fee": stripe_fee,
                "Stripe Platform Fee": stripe_platform_fee,
                "International Fee": international_fee,
                "Transfer Fee": transfer_fee,
                "Infra Cost": infra_cost,
                "Net Profit": net_profit,
                "Freelancer Payout": freelancer_payout,
            }
        )

    return pd.DataFrame(project_data)


df = simulate_projects(
    num_projects,
    project_min,
    project_max,
    fee_threshold,
    flat_fee,
    commission_rate,
    CONFIG,
)
# Calculate number of customers and total CAC
num_customers = int(np.ceil(num_projects / avg_projects_per_customer))
total_cac = num_customers * cac_per_customer

df["Project Tier"] = df["Project Value"].apply(
    lambda x: "Small" if x < fee_threshold else "Standard"
)
df["Margin (%)"] = (df["Net Profit"] / df["Platform Fee"] * 100).replace(
    [np.inf, -np.inf], 0
)

avg_project_value = df["Project Value"].mean()
customer_lifetime_months = 12
# Update LTV calculation to use avg_projects_per_customer
ltv = (
    avg_project_value
    * avg_projects_per_customer
    * (commission_rate / 100)
    * customer_lifetime_months
)

total_revenue = df["Platform Fee"].sum()
total_stripe_fees = df["Stripe Fee"].sum() + df["Stripe Platform Fee"].sum()
total_international_fees = df["International Fee"].sum()
total_infra_costs = df["Infra Cost"].sum()
gross_profit = (
    total_revenue - total_stripe_fees - total_international_fees - total_infra_costs
)
monthly_projects = num_projects / 12
annual_team_cost = monthly_team_cost * 12 if enable_salaries else 0
ebitda = gross_profit - total_cac - annual_team_cost
net_profit = ebitda

pnl = {
    "Revenue (Platform Fees)": total_revenue,
    "COGS - Stripe Payment Fees": total_stripe_fees,
    "COGS - International Fees": total_international_fees,
    "COGS - Infrastructure Costs": total_infra_costs,
    "Gross Profit": gross_profit,
    "CAC (Customer Acquisition)": total_cac,
    "Team Salaries (Annual)": annual_team_cost,
    "EBITDA": ebitda,
    "Net Profit": net_profit,
    "--- Customer Paid Fees ---": "---",
    "Transfer Fees (Customer Paid)": df["Transfer Fee"].sum(),
}

pnl["Gross Margin (%)"] = (
    (gross_profit / total_revenue * 100) if total_revenue > 0 else 0
)
pnl["EBITDA Margin (%)"] = (ebitda / total_revenue * 100) if total_revenue > 0 else 0
pnl["Net Margin (%)"] = (net_profit / total_revenue * 100) if total_revenue > 0 else 0


# --- Metrics Grid Board ---
def metrics_grid_board(metrics, columns=6, title=None):
    """
    Display a grid of metrics using Streamlit columns.
    metrics: List of (label, value, delta, helptext) tuples.
    columns: Number of columns in the grid.
    title: Optional title to display above the grid.
    """
    import math

    if title:
        st.subheader(title)

    # Calculate the number of rows needed
    rows = math.ceil(len(metrics) / columns)

    for i in range(rows):
        # Determine the metrics for the current row
        start_index = i * columns
        end_index = start_index + columns
        row_metrics = metrics[start_index:end_index]

        # Create columns for the current row
        cols = st.columns(columns)

        # Display metrics in the current row
        for col, metric in zip(cols, row_metrics):
            label, value, delta, helptext = metric
            if delta is not None:
                col.metric(label=label, value=value, delta=delta, help=helptext)
            else:
                col.metric(label=label, value=value, help=helptext)

        # Fill any remaining empty columns in the row
        for col in cols[len(row_metrics):]:
            col.write("")


# --- Metrics Data ---
metrics_data = [
    (
        "üí∞ Total Revenue",
        f"${total_revenue:,.0f}",
        f"{pnl['Gross Margin (%)']:.1f}% GM",
        "Total platform fees collected",
    ),
    (
        "üí∏ Total COGS",
        f"${total_stripe_fees + total_international_fees + total_infra_costs:,.0f}",
        f"Stripe: ${total_stripe_fees:,.0f}",
        "Cost of Goods Sold (Stripe fees + International fees + Infrastructure)",
    ),
    (
        "üìà EBITDA",
        f"${ebitda:,.0f}",
        f"{pnl['EBITDA Margin (%)']:.1f}%",
        "Earnings Before Interest, Taxes, Depreciation, Amortization",
    ),
    (
        "üèÜ Net Profit",
        f"${net_profit:,.0f}",
        f"{pnl['Net Margin (%)']:.1f}%",
        "Bottom line profit after all expenses",
    ),
    (
        "üíµ Per-Project Profit (Excl. CAC)",
        f"${df['Net Profit'].mean():.2f}",
        None,
        "Average net profit per project (excludes CAC)",
    ),
    (
        "üìà Max Project Profit",
        f"${df['Net Profit'].max():.2f}",
        None,
        "Maximum net profit for a single project (excludes CAC)",
    ),
    (
        "üìä Avg Revenue/Project",
        f"${df['Platform Fee'].mean():.2f}",
        None,
        "Average platform fee per project",
    ),
    (
        "üßæ COGS/Project",
        f"${(total_stripe_fees + total_international_fees + total_infra_costs) / num_projects:.2f}",
        None,
        "Average COGS per project",
    ),
    (
        "üìà EBITDA/Project",
        f"${ebitda / num_projects:.2f}",
        None,
        "EBITDA per project (aggregate, includes CAC and team costs)",
    ),
    (
        "üí∞ Net Profit/Project",
        f"${net_profit / num_projects:.2f}",
        None,
        "Net profit per project (aggregate, includes CAC and team costs)",
    ),
    (
        "üìâ Min Project Profit",
        f"${df['Net Profit'].min():.2f}",
        None,
        "Minimum net profit for a single project (excludes CAC)",
    ),
    (
        "üìä Median Project Profit",
        f"${df['Net Profit'].median():.2f}",
        None,
        "Median net profit per project (excludes CAC)",
    ),
    (
        "üéØ CAC per Customer",
        f"${cac_per_customer}",
        None,
        "Customer Acquisition Cost (CAC) is the average cost to acquire a customer. This is applied at the aggregate level, not per project.",
    ),
    (
        "üíé Customer LTV",
        f"${ltv:.0f}",
        None,
        "Customer Lifetime Value (LTV) is the average platform revenue generated by a customer over their lifetime, based on average projects per customer and customer lifetime.",
    ),
    (
        "‚öñÔ∏è LTV/CAC Ratio",
        f"{ltv / cac_per_customer:.1f}x" if cac_per_customer > 0 else "‚àû",
        "Healthy"
        if (ltv / cac_per_customer > 3 if cac_per_customer > 0 else True)
        else "Needs Work",
        "LTV to CAC ratio (>3x is healthy)",
    ),
]

# Display the metrics grid (6 columns per row)
metrics_grid_board(metrics_data, columns=5)

st.subheader("üìã Detailed P&L Statement")
pnl_df = pd.DataFrame(pnl, index=[0]).T
pnl_df.columns = ["Amount ($)"]
pnl_df["Amount ($)"] = pnl_df["Amount ($)"].apply(
    lambda x: f"${x:,.2f}" if isinstance(x, (int, float)) and not pd.isna(x) else str(x)
)
st.dataframe(pnl_df, use_container_width=True)

if monthly_team_cost > 0:
    monthly_gross_profit = gross_profit / 12
    breakeven_months = (
        annual_team_cost / monthly_gross_profit
        if monthly_gross_profit > 0
        else float("inf")
    )
    st.info(
        f"üí° **Break-even Analysis**: With current team costs of ${monthly_team_cost:,.0f}/month, break-even in {breakeven_months:.1f} months"
    )

# Visualizations
sns.set_theme(style="darkgrid", palette="bright")
plt.style.use("dark_background")

st.subheader("üìä Project Value Distribution")
fig, ax = plt.subplots(figsize=(12, 6), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
n, bins, patches = ax.hist(
    df["Project Value"],
    bins=40,
    alpha=0.8,
    color="#00D4FF",
    edgecolor="white",
    linewidth=0.5,
)
xs = np.linspace(df["Project Value"].min(), df["Project Value"].max(), 200)
density = stats.gaussian_kde(df["Project Value"])
ax.plot(
    xs,
    density(xs) * len(df["Project Value"]) * (bins[1] - bins[0]),
    color="#FFE66D",
    linewidth=3,
    alpha=0.9,
)
ax.axvline(
    x=fee_threshold,
    color="#FF6B6B",
    linestyle="--",
    alpha=0.8,
    linewidth=2,
    label=f"Fee Threshold (${fee_threshold})",
)
ax.set_title(
    "Distribution of Project Values (Histogram with KDE)",
    fontsize=16,
    fontweight="bold",
    color="white",
    pad=20,
)
ax.set_xlabel("Project Value (USD)", color="white", fontweight="bold")
ax.set_ylabel("Number of Projects", color="white", fontweight="bold")
ax.tick_params(colors="white")
ax.legend(facecolor="#2d2d2d", edgecolor="white", labelcolor="white")
plt.tight_layout()
st.pyplot(fig)

st.subheader("üí∞ Net Profit per Project")
fig, ax = plt.subplots(figsize=(12, 6), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
profit_values = df["Net Profit"]
n, bins, patches = ax.hist(
    profit_values, bins=40, alpha=0.8, color="#4ECDC4", edgecolor="white", linewidth=0.5
)
for i, (patch, bin_left, bin_right) in enumerate(zip(patches, bins[:-1], bins[1:])):
    if bin_right <= 0:
        patch.set_facecolor("#FF6B6B")
xs = np.linspace(profit_values.min(), profit_values.max(), 200)
density = stats.gaussian_kde(profit_values)
ax.plot(
    xs,
    density(xs) * len(profit_values) * (bins[1] - bins[0]),
    color="#FFE66D",
    linewidth=3,
    alpha=0.9,
)
ax.axvline(x=0, color="white", linestyle="--", alpha=0.7, linewidth=2)
ax.set_title(
    "Distribution of Net Profit per Project (Excludes CAC)",
    fontsize=16,
    fontweight="bold",
    color="white",
    pad=20,
)
ax.set_xlabel("Net Profit (USD)", color="white", fontweight="bold")
ax.set_ylabel("Number of Projects", color="white", fontweight="bold")
ax.tick_params(colors="white")
plt.tight_layout()
st.pyplot(fig)

st.subheader("üí∏ Cost Breakdown Analysis")
cost_data = {
    "Category": [
        "Platform Revenue",
        "Stripe Payment Fees",
        "Infrastructure",
        "Customer Acquisition",
        "Team Salaries",
    ],
    "Amount": [
        total_revenue,
        total_stripe_fees,
        total_infra_costs,
        total_cac,
        annual_team_cost,
    ],
    "Type": ["Revenue", "Cost", "Cost", "Cost", "Cost"],
}
cost_df = pd.DataFrame(cost_data)
cost_df_filtered = cost_df[cost_df["Amount"] > 0]

fig, ax = plt.subplots(figsize=(8, 8), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
colors = ["#4ECDC4", "#FFE66D", "#A8E6CF", "#e85d04", "#FF6B6B"][
    : len(cost_df_filtered)
]
total_amount = cost_df_filtered["Amount"].sum()

# Improved donut chart for cost breakdown
wedges, texts = ax.pie(
    cost_df_filtered["Amount"],
    labels=None,  # We'll add custom labels manually
    colors=colors,
    autopct=None,
    startangle=90,
    pctdistance=0.85,
    textprops={"color": "white", "fontweight": "bold", "fontsize": 14},
    wedgeprops={"linewidth": 2, "edgecolor": "white"},
)

for i, (wedge, label, amount) in enumerate(
    zip(wedges, cost_df_filtered["Category"], cost_df_filtered["Amount"])
):
    angle = (wedge.theta2 + wedge.theta1) / 2
    x = np.cos(np.deg2rad(angle)) * 1.18
    y = np.sin(np.deg2rad(angle)) * 1.18
    percent = amount / total_amount * 100
    ax.text(
        x,
        y,
        f"{label}\n${amount:,.0f} ({percent:.1f}%)",
        ha="center",
        va="center",
        fontsize=14,
        fontweight="bold",
        color="white",
        bbox=dict(boxstyle="round,pad=0.3", fc="#222", ec="none", alpha=0.7),
    )

centre_circle = plt.Circle((0, 0), 0.60, fc="#0a0a0a")
ax.add_artist(centre_circle)
ax.text(
    0,
    0,
    f"Net Profit\n${net_profit:,.0f}",
    ha="center",
    va="center",
    fontsize=16,
    fontweight="bold",
    color="#FFE66D",
)
ax.set_title(
    "Revenue and Cost Breakdown",
    fontsize=18,
    fontweight="bold",
    color="white",
    pad=20,
)
plt.tight_layout()
st.pyplot(fig)

st.subheader("üéØ Project Value vs Net Profit")
fig, ax = plt.subplots(figsize=(12, 8), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
scatter = ax.scatter(
    df["Project Value"],
    df["Net Profit"],
    c=df["Net Profit"],
    s=60,
    alpha=0.7,
    cmap="RdYlBu_r",
    edgecolors="white",
    linewidth=0.5,
)
ax.axhline(
    y=0, color="#FF6B6B", linestyle="--", alpha=0.8, linewidth=2, label="Break-even"
)
ax.axvline(
    x=fee_threshold,
    color="#FFE66D",
    linestyle="--",
    alpha=0.8,
    linewidth=2,
    label=f"Fee Threshold (${fee_threshold})",
)
z = np.polyfit(df["Project Value"], df["Net Profit"], 1)
p = np.poly1d(z)
ax.plot(
    df["Project Value"],
    p(df["Project Value"]),
    color="#FFE66D",
    linewidth=3,
    alpha=0.8,
    label="Trend Line",
)
cbar = plt.colorbar(scatter, ax=ax)
cbar.set_label("Net Profit (USD)", color="white", fontweight="bold")
cbar.ax.yaxis.set_tick_params(color="white")
plt.setp(plt.getp(cbar.ax.axes, "yticklabels"), color="white")
ax.set_title(
    "Project Value vs Net Profit Analysis (with Fee Threshold)",
    fontsize=16,
    fontweight="bold",
    color="white",
    pad=20,
)
ax.set_xlabel("Project Value (USD)", color="white", fontweight="bold")
ax.set_ylabel("Net Profit (USD)", color="white", fontweight="bold")
ax.tick_params(colors="white")
ax.legend(facecolor="#2d2d2d", edgecolor="white", labelcolor="white")
plt.tight_layout()
st.pyplot(fig)

st.subheader("üìà Net Profit by Project Tier")
fig, ax = plt.subplots(figsize=(12, 7), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
small_projects = df[df["Project Tier"] == "Small"]["Net Profit"].values
standard_projects = df[df["Project Tier"] == "Standard"]["Net Profit"].values

if len(small_projects) > 0 and len(standard_projects) > 0:
    parts = ax.violinplot(
        [small_projects, standard_projects],
        positions=[1, 2],
        showmeans=True,
        showmedians=True,
    )
    colors = ["#FF6B6B", "#4ECDC4"]
    for pc, color in zip(parts["bodies"], colors):
        pc.set_facecolor(color)
        pc.set_alpha(0.7)

    box_parts = ax.boxplot(
        [small_projects, standard_projects],
        positions=[1, 2],
        patch_artist=True,
        boxprops=dict(facecolor="none", edgecolor="white", linewidth=2),
        medianprops=dict(color="white", linewidth=3),
        whiskerprops=dict(color="white", linewidth=2),
        capprops=dict(color="white", linewidth=2),
    )

    ax.set_xticklabels(
        ["Small Projects", "Standard Projects"], color="white", fontweight="bold"
    )
    ax.set_title(
        "Net Profit Distribution by Project Tier",
        fontsize=16,
        fontweight="bold",
        color="white",
        pad=20,
    )
    ax.set_ylabel("Net Profit (USD)", color="white", fontweight="bold")
    ax.tick_params(colors="white")
    ax.axhline(y=0, color="#FFE66D", linestyle="--", alpha=0.7, linewidth=2)
else:
    all_profits = df["Net Profit"].values
    ax.hist(
        all_profits,
        bins=30,
        alpha=0.8,
        color="#4ECDC4",
        edgecolor="white",
        linewidth=0.5,
    )
    ax.axhline(y=0, color="#FFE66D", linestyle="--", alpha=0.7, linewidth=2)
    ax.set_title(
        "Net Profit Distribution (All Projects)",
        fontsize=16,
        fontweight="bold",
        color="white",
        pad=20,
    )
    ax.set_xlabel("Net Profit (USD)", color="white", fontweight="bold")
    ax.set_ylabel("Number of Projects", color="white", fontweight="bold")
    ax.tick_params(colors="white")

plt.tight_layout()
st.pyplot(fig)

st.subheader("üìä Profit Margin Distribution")
fig, ax = plt.subplots(figsize=(12, 6), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
n, bins, patches = ax.hist(
    df["Margin (%)"], bins=30, alpha=0.8, edgecolor="white", linewidth=0.5
)

for i, patch in enumerate(patches):
    margin_val = (bins[i] + bins[i + 1]) / 2
    if margin_val < 0:
        patch.set_facecolor("#FF6B6B")
    elif margin_val < 20:
        patch.set_facecolor("#FFE66D")
    else:
        patch.set_facecolor("#4ECDC4")

margin_values = df["Margin (%)"]
xs = np.linspace(margin_values.min(), margin_values.max(), 200)
density = stats.gaussian_kde(margin_values)
ax.plot(
    xs,
    density(xs) * len(margin_values) * (bins[1] - bins[0]),
    color="#00D4FF",
    linewidth=3,
    alpha=0.9,
)

mean_margin = margin_values.mean()
ax.axvline(
    x=mean_margin,
    color="white",
    linestyle="--",
    alpha=0.8,
    linewidth=2,
    label=f"Mean: {mean_margin:.1f}%",
)

ax.set_title(
    "Distribution of Profit Margins",
    fontsize=16,
    fontweight="bold",
    color="white",
    pad=20,
)
ax.set_xlabel("Margin (%)", color="white", fontweight="bold")
ax.set_ylabel("Number of Projects", color="white", fontweight="bold")
ax.tick_params(colors="white")
ax.legend(facecolor="#2d2d2d", edgecolor="white", labelcolor="white")
plt.tight_layout()
st.pyplot(fig)

st.subheader("üèóÔ∏è Infrastructure Cost by Project Type")
fig, ax = plt.subplots(figsize=(12, 7), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
infra_summary = (
    df.groupby("Project Type")["Infra Cost"].sum().sort_values(ascending=False)
)
type_colors = ["#00D4FF", "#4ECDC4", "#FFE66D", "#FF6B6B"]
bars = ax.bar(
    infra_summary.index,
    infra_summary.values,
    color=type_colors[: len(infra_summary)],
    alpha=0.8,
    edgecolor="white",
    linewidth=2,
)

for bar, value in zip(bars, infra_summary.values):
    ax.text(
        bar.get_x() + bar.get_width() / 2,
        bar.get_height() + max(infra_summary.values) * 0.01,
        f"${value:.2f}",
        ha="center",
        va="bottom",
        color="white",
        fontweight="bold",
    )

ax.set_title(
    "Infrastructure Cost by Project Type",
    fontsize=16,
    fontweight="bold",
    color="white",
    pad=20,
)
ax.set_xlabel("Project Type", color="white", fontweight="bold")
ax.set_ylabel("Total Infrastructure Cost ($)", color="white", fontweight="bold")
ax.tick_params(colors="white")
plt.tight_layout()
st.pyplot(fig)

video_projects = df[df["Project Type"] == "video"]
if len(video_projects) > 0:
    st.subheader("üé• Video Project Analysis")
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6), facecolor="#0a0a0a")

    ax1.set_facecolor("#0a0a0a")
    n, bins, patches = ax1.hist(
        video_projects["Storage GB"],
        bins=20,
        alpha=0.8,
        color="#00D4FF",
        edgecolor="white",
        linewidth=0.5,
    )
    for i, patch in enumerate(patches):
        if bins[i] <= video_free_gb:
            patch.set_facecolor("#4ECDC4")
        else:
            patch.set_facecolor("#FFE66D")

    ax1.axvline(
        x=video_free_gb,
        color="#FF6B6B",
        linestyle="--",
        alpha=0.8,
        linewidth=3,
        label=f"Free Storage Limit ({video_free_gb}GB)",
    )
    ax1.set_title(
        "Video Project Storage Distribution",
        fontsize=14,
        fontweight="bold",
        color="white",
    )
    ax1.set_xlabel("Storage Size (GB)", color="white", fontweight="bold")
    ax1.set_ylabel("Number of Projects", color="white", fontweight="bold")
    ax1.tick_params(colors="white")
    ax1.legend(facecolor="#2d2d2d", edgecolor="white", labelcolor="white")

    ax2.set_facecolor("#0a0a0a")
    video_costs = video_projects["Infra Cost"]
    n2, bins2, patches2 = ax2.hist(
        video_costs,
        bins=15,
        alpha=0.8,
        color="#FFE66D",
        edgecolor="white",
        linewidth=0.5,
    )
    for i, patch in enumerate(patches2):
        if bins2[i] == 0:
            patch.set_facecolor("#4ECDC4")

    ax2.set_title(
        "Video Infrastructure Costs", fontsize=14, fontweight="bold", color="white"
    )
    ax2.set_xlabel("Infrastructure Cost ($)", color="white", fontweight="bold")
    ax2.set_ylabel("Number of Projects", color="white", fontweight="bold")
    ax2.tick_params(colors="white")
    plt.tight_layout()
    st.pyplot(fig)

st.subheader("üìä Project Type Distribution")
fig, ax = plt.subplots(figsize=(10, 10), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
type_counts = df["Project Type"].value_counts()
type_colors_donut = ["#00D4FF", "#4ECDC4", "#FFE66D", "#FF6B6B"][: len(type_counts)]

total_projects = sum(type_counts.values)
# Improved donut chart for readability and label placement
wedges, texts = ax.pie(
    type_counts.values,
    labels=None,  # We'll add custom labels manually
    colors=type_colors_donut,
    autopct=None,  # We'll add custom percentages manually
    startangle=90,
    pctdistance=0.85,  # Move percentage labels closer to the edge
    textprops={"color": "white", "fontweight": "bold", "fontsize": 14},
    wedgeprops={"linewidth": 2, "edgecolor": "white"},
)

# Add custom labels and percentages outside the donut
for i, (wedge, label, count) in enumerate(
    zip(wedges, type_counts.index, type_counts.values)
):
    angle = (wedge.theta2 + wedge.theta1) / 2
    x = np.cos(np.deg2rad(angle)) * 1.15
    y = np.sin(np.deg2rad(angle)) * 1.15
    percent = count / total_projects * 100
    ax.text(
        x,
        y,
        f"{label}\n{count} ({percent:.1f}%)",
        ha="center",
        va="center",
        fontsize=15,
        fontweight="bold",
        color="white",
        bbox=dict(boxstyle="round,pad=0.3", fc="#222", ec="none", alpha=0.7),
    )

# Draw center circle for donut effect
centre_circle = plt.Circle((0, 0), 0.60, fc="#0a0a0a")
ax.add_artist(centre_circle)
ax.text(
    0,
    0,
    f"Total\n{total_projects:,}",
    ha="center",
    va="center",
    fontsize=18,
    fontweight="bold",
    color="#FFE66D",
)
ax.set_title(
    "Project Type Distribution",
    fontsize=20,
    fontweight="bold",
    color="white",
    pad=30,
)
plt.tight_layout()
st.pyplot(fig)

st.subheader("üìà Net Profit by Project Type")
fig, ax = plt.subplots(figsize=(12, 7), facecolor="#0a0a0a")
ax.set_facecolor("#0a0a0a")
project_types = df["Project Type"].unique()
profit_data = [
    df[df["Project Type"] == ptype]["Net Profit"].values for ptype in project_types
]
box_parts = ax.boxplot(
    profit_data,
    tick_labels=project_types,
    patch_artist=True,
    boxprops=dict(facecolor="none", edgecolor="white", linewidth=2),
    medianprops=dict(color="#FFE66D", linewidth=3),
    whiskerprops=dict(color="white", linewidth=2),
    capprops=dict(color="white", linewidth=2),
)

for patch, color in zip(box_parts["boxes"], type_colors_donut):
    patch.set_facecolor(color)
    patch.set_alpha(0.7)

ax.axhline(
    y=0, color="#FF6B6B", linestyle="--", alpha=0.7, linewidth=2, label="Break-even"
)
ax.set_title(
    "Net Profit Distribution by Project Type",
    fontsize=16,
    fontweight="bold",
    color="white",
    pad=20,
)
ax.set_xlabel("Project Type", color="white", fontweight="bold")
ax.set_ylabel("Net Profit ($)", color="white", fontweight="bold")
ax.tick_params(colors="white")
ax.legend(facecolor="#0a0a0a", edgecolor="white", labelcolor="white")
plt.tight_layout()
st.pyplot(fig)

st.header("üì• Export & Download")

# Combine summary and project data into one CSV
summary_df = pd.DataFrame(list(pnl.items()), columns=["Metric", "Value"])
summary_csv = summary_df.to_csv(index=False)
project_csv = df.to_csv(index=False)

# Combine both as a single CSV with a separator
detailed_csv = (
    "# bl0q Platform Financial Simulator - Summary\n"
    + summary_csv
    + "\n# Project Data\n"
    + project_csv
)

st.download_button(
    label="üíæ Download Detailed CSV (Summary + Project Data)",
    data=detailed_csv,
    file_name=f"bloq_detailed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
    mime="text/csv",
)

# Replace the footer with a single line of text
st.markdown("**bl0q Platform Financial Simulator ‚Äì All rights reserved.**")
